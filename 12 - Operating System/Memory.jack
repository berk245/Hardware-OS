// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array RAM;
	static Array HEAP;

    /** Initializes the class. */
    function void init() {
        let RAM = 0;
		let HEAP = 2048;
		let HEAP[0] = -1; // No more free segments
		let HEAP[1] = 16384 - 2048 - 2; // Initial free size
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address]
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size){
		var Array freeBase, selectedFreeBlock, allocatedBlock;
		var int currentFreeSize, heapBoundary;
		
		if(size < 0){
			do Sys.error(5);
		}
		
		let freeBase = HEAP;
		let selectedFreeBlock = -1;
		let heapBoundary = HEAP[1] + 1; 
		let currentFreeSize = freeBase[1];
		while(freeBase > -1){
			if(~(currentFreeSize < (size + 2))){
				if(currentFreeSize < heapBoundary){
					let selectedFreeBlock = freeBase;
					let heapBoundary = currentFreeSize;
				}
			}
			let freeBase = freeBase[0];
			let currentFreeSize = freeBase[1];
		}
		if(selectedFreeBlock = -1){
			do Sys.error(6);
		}
		
		let selectedFreeBlock[1] = selectedFreeBlock[1] - size -2;
		let allocatedBlock = selectedFreeBlock + selectedFreeBlock[1] + 1;
		let allocatedBlock[0] = -1;
		let allocatedBlock[1] = size;
		return allocatedBlock + 2;
	}
	
	function void deAlloc(Array array){
		var Array current, block;
		let block = array - 2;
		let current = HEAP;
		while(current[0] > 0){
			let current = current[0];
		}
		let current[0] = block;
		return;
	}